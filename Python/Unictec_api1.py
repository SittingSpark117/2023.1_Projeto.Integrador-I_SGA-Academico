# -*- coding: utf-8 -*-
"""UNICTECapi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TK1d4aQzF20t9D3t9RbhjwW-q84d-pC_
"""

from flask import Flask, jsonify, request
import psycopg2
import pandas as pd


#credenciais de conexão
host = 'unictec.postgres.database.azure.com'
dbname = 'postgres'
user = 'bolinho'
password = 'abacaxi123!'
port = '5432'
sslmode = 'require'

#criando conexão com o banco
def conecta_db():
    conn = psycopg2.connect(
        host=host,
        database=dbname,
        user=user,
        password=password,
        port=port,
        sslmode=sslmode
    )
    return conn


#consulta global
def consulta(sql):
    con = conecta_db()
    cur = con.cursor()
    cur.execute(sql)
    recset = cur.fetchall()
    con.close()
    return recset





#nota por aluno
def consultaNotaByaluno(cod_disciplina, aluno_ra):
  sql="select * from postgres.public.prova where cod_disciplina ='{}' and ra = '{}'".format(cod_disciplina, aluno_ra)
  provas = consulta(sql) 
  for notas in provas:
      print(notas.nota_tirada)
  return jsonify(provas)
dados = [['dados']]
df = pd.DataFrame(dados)


#nota por aluno
def consultaNotasByaluno( aluno_ra):
  sql="select * from postgres.public.prova where ra = '{}'".format(aluno_ra)
  provas = consulta(sql)   
  for notas in provas:
      print(notas)
  #return jsonify(provas)


# def view():
#   sql = "select * from postgres.public.prova  LIMIT 10"
#   provas = consulta(sql)
#   for prova in provas:
#       print(prova)



def viewAlunosByCurso(cod_disciplina):
  sql = "select * from postgres.public.aluno where cod_curso = '{}' LIMIT 10".format(cod_disciplina)  
  alunos = consulta(sql)
  for aluno in alunos:
      print(aluno)




def viewAlunos():
  sql = "select * from postgres.public.aluno ".format()  
  alunos = consulta(sql)
  for aluno in alunos:
      print(aluno)



viewAlunos()
dis = input("digite o código do curso")

viewAlunosByCurso(dis)


ra= input("entre com o ra")

consultaNotasByaluno(ra)

app = Flask(__name__)

@app.route('/')
def homepage():
  return 'UNICTEC no ar'


@app.route('/login', methods=['POST'])
def fazer_login():
    dados = request.get_json()
    username = dados['email']
    password = dados['senha']

    conn = conectar_banco_dados()
    cursor = conn.cursor()

    # Verifica se o usuário e senha estão corretos
    cursor.execute('SELECT * FROM aluno WHERE email = ? AND senha = ?', (username, password))
    resultado = cursor.fetchone()
    conn.close()

    if resultado:
        return jsonify({'mensagem': 'Login bem-sucedido'})
    else:
        return jsonify({'mensagem': 'Usuário ou senha inválidos'})





@app.route('/notas', methods=['GET'])
def consultaNotaByaluno(cod_disciplina, aluno_ra):
  sql="select * from postgres.public.prova where cod_disciplina ='{}' and ra = '{}'".format(cod_disciplina, aluno_ra)
  provas = consulta(sql) 
  for notas in provas:
      print(notas.nota_tirada)
  return jsonify(provas)


  
# Exemplo de dados em uma lista
produtos = [
    {'id': 1, 'nome': 'Produto A', 'preco': 10.99},
    {'id': 2, 'nome': 'Produto B', 'preco': 5.99},
]




# Rota para obter todos os produtos
@app.route('/produtos', methods=['GET'])
def obter_produtos():
    return jsonify(produtos)



# Rota para obter um produto por ID
@app.route('/produtos/<int:id>', methods=['GET'])
def obter_produto(id):
    produto = next((p for p in produtos if p['id'] == id), None)
    if produto:
        return jsonify(produto)
    else:
        return jsonify({'mensagem': 'Produto não encontrado'}), 404



# Rota para adicionar um novo produto
@app.route('/produtos', methods=['POST'])
def adicionar_produto():
    novo_produto = request.get_json()
    produtos.append(novo_produto)
    return jsonify(novo_produto), 201




# Rota para atualizar um produto existente
@app.route('/produtos/<int:id>', methods=['PUT'])
def atualizar_produto(id):
    produto_atualizado = request.get_json()
    for produto in produtos:
        if produto['id'] == id:
            produto.update(produto_atualizado)
            return jsonify(produto)
    return jsonify({'mensagem': 'Produto não encontrado'}), 404




# Rota para excluir um produto
@app.route('/produtos/<int:id>', methods=['DELETE'])
def excluir_produto(id):
    produto = next((p for p in produtos if p['id'] == id), None)
    if produto:
        produtos.remove(produto)
        return jsonify({'mensagem': 'Produto excluído'})
    else:
        return jsonify({'mensagem': 'Produto não encontrado'}), 404

if __name__ == '__main__':
    app.run()